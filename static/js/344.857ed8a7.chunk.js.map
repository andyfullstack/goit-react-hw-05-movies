{"version":3,"file":"static/js/344.857ed8a7.chunk.js","mappings":"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","sources":["api/api.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/helpers/useFetchFilmCast.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '55c7963f554e93b8171f77252cd52611';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getAllMoviesList = async () => {\n  try {\n    const data = await axios(`/trending/all/day?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const data = await axios(\n      `/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getAllMoviesInfo = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getCastInfo = async movieId => {\n  try {\n    const { data } = await axios(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getReviewsInfo = async movieId => {\n  try {\n    const data = await axios(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n","import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  text-align: center;\n`;\n\nexport const CastHeading = styled.h3`\n  text-align: center;\n  color: #54414e;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n  list-style: none;\n`;\n\nexport const CastItem = styled.li`\n  text-align: center;\n`;\n\nexport const CastImage = styled.img`\n  border-radius: 8px;\n  border: 2px solid #a790a5;\n`;\n\nexport const CastName = styled.h3`\n  margin-top: 10px;\n  color: #54414e;\n`;\n\nexport const CastCharacter = styled.p`\n  margin-top: 5px;\n  color: #875c74;\n`;\n","import React from 'react';\n\nimport { useFetchFilmCast } from 'components/helpers/useFetchFilmCast';\nimport {\n  CastCharacter,\n  CastContainer,\n  CastHeading,\n  CastImage,\n  CastItem,\n  CastList,\n  CastName,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const defaultImg =\n    'https://cdn.pixabay.com/photo/2013/11/28/10/02/camera-219958_1280.jpg';\n\n  const movieCast = useFetchFilmCast();\n  if (!movieCast.credits || movieCast.credits.length === 0) {\n    return (\n      <p style={{ textAlign: 'center' }}>\n        There isn't any information about the movie cast\n      </p>\n    );\n  }\n\n  return (\n    <CastContainer>\n      <CastHeading>Movie cast</CastHeading>\n      <CastList>\n        {movieCast.credits.map(\n          ({ movie_id, profile_path, original_name, character }) => (\n            <CastItem key={movie_id}>\n              <CastImage\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : defaultImg\n                }\n                alt={original_name}\n                width={280}\n                height={400}\n              />\n              <CastName>{original_name}</CastName>\n              <CastCharacter>Character: {character}</CastCharacter>\n            </CastItem>\n          )\n        )}\n      </CastList>\n    </CastContainer>\n  );\n};\n\nexport default Cast;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastInfo } from 'api/api';\n\nexport const useFetchFilmCast = () => {\n  const [credits, setCredits] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    if (!movieId) return;\n    const fetchMovieCast = async () => {\n      try {\n        const data = await getCastInfo(movieId);\n        setCredits(data.cast);\n      } catch (error) {\n        setError('Try to reload the page');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  return { credits, error, loading };\n};\n"],"names":["API_KEY","axios","getAllMoviesList","async","concat","error","getMovieByQuery","query","getAllMoviesInfo","data","movieId","getCastInfo","getReviewsInfo","CastContainer","styled","_templateObject","_taggedTemplateLiteral","CastHeading","_templateObject2","CastList","_templateObject3","CastItem","_templateObject4","CastImage","_templateObject5","CastName","_templateObject6","CastCharacter","_templateObject7","Cast","movieCast","useFetchFilmCast","credits","setCredits","useState","setError","loading","setLoading","useParams","useEffect","cast","fetchMovieCast","length","_jsxs","children","_jsx","map","_ref","movie_id","profile_path","original_name","character","src","alt","width","height","style","textAlign"],"sourceRoot":""}